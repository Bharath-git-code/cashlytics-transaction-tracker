name: Build APK (Minimal Working)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Java 11  
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install essential build tools only
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          unzip \
          expect \
          build-essential \
          autoconf \
          automake \
          libtool \
          pkg-config \
          libffi-dev \
          libssl-dev \
          python3-dev \
          m4

    - name: Install Python build tools
      run: |
        python -m pip install --upgrade pip
        pip install cython==0.29.36
        pip install buildozer

    - name: Prepare buildozer.spec
      run: |
        cp buildozer.spec buildozer.spec.backup
        sed -i 's/^android\.sdk_path/#android.sdk_path/' buildozer.spec
        sed -i 's/^android\.ndk_path/#android.ndk_path/' buildozer.spec

    - name: Pre-accept Android SDK licenses
      run: |
        mkdir -p "$HOME/.android/licenses"
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$HOME/.android/licenses/android-sdk-license"
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> "$HOME/.android/licenses/android-sdk-license"
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> "$HOME/.android/licenses/android-sdk-license"

    - name: Build APK with minimal environment
      run: |
        echo "üöÄ Building APK with minimal but complete environment..."
        
        export BUILDOZER_LOG_LEVEL=2
        export PYTHONUNBUFFERED=1
        
        expect -c "
        set timeout 3600
        spawn buildozer android debug -v
        expect {
          \"Accept? (y/N):\" { 
            send \"y\r\"
            exp_continue 
          }
          \"Do you accept the license\" { 
            send \"y\r\"
            exp_continue 
          }
          \"(y/N)\" { 
            send \"y\r\"
            exp_continue 
          }
          eof { 
            puts \"Build process completed\"
          }
          timeout { 
            puts \"Build timed out but may have succeeded\"
          }
        }
        " 2>&1 | tee minimal_build.log

    - name: Search for APK files thoroughly
      run: |
        echo "üîç Searching entire workspace for APK files:"
        
        # Search everywhere
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "üì± FOUND APK: $apk"
          ls -lh "$apk"
          
          # Copy to bin for upload
          mkdir -p bin
          cp "$apk" bin/
          echo "‚úÖ Copied to bin/"
        done
        
        # If no APKs found, check common locations
        if [ ! -f bin/*.apk ]; then
          echo "‚ùå No APK files found yet, checking build directories..."
          
          # Check buildozer output locations
          for dir in \
            ".buildozer/android/platform/build-arm64-v8a_armeabi-v7a/dists/cashlytics" \
            ".buildozer/android/platform/build-arm64-v8a_armeabi-v7a/bin" \
            ".buildozer/android/bin" \
            ".buildozer/android/dist"; do
            
            if [ -d "$dir" ]; then
              echo "Checking $dir:"
              find "$dir" -type f \( -name "*.apk" -o -name "*.aab" \) 2>/dev/null | head -5
            fi
          done
        fi
        
        echo ""
        echo "üìÇ Final bin directory contents:"
        ls -la bin/ 2>/dev/null || echo "bin directory is empty"

    - name: Check build status from log
      run: |
        if [ -f minimal_build.log ]; then
          echo "üìã Build log analysis:"
          
          # Check for success indicators
          if grep -qi "BUILD SUCCESSFUL\|apk.*created\|package.*success" minimal_build.log; then
            echo "‚úÖ Build appears successful!"
          else
            echo "‚ö†Ô∏è No clear success indicators found"
          fi
          
          # Show last 30 lines
          echo ""
          echo "=== Last 30 lines of build log ==="
          tail -30 minimal_build.log
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cashlytics-apk-minimal
        path: bin/*.apk
        retention-days: 30
        if-no-files-found: warn

    - name: Upload logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: minimal-build-logs
        path: |
          minimal_build.log
          .buildozer/**/*.log
        retention-days: 7
        if-no-files-found: warn

    - name: Restore buildozer.spec
      if: always()
      run: |
        if [ -f buildozer.spec.backup ]; then
          mv buildozer.spec.backup buildozer.spec
        fi