name: Build APK

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
    paths: 
      - '**.py'
      - 'buildozer.spec'
      - 'requirements.txt'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Java 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          unzip \
          zip \
          git \
          build-essential \
          python3-dev \
          libffi-dev \
          libssl-dev \
          autoconf \
          libtool \
          pkg-config

    - name: Set JAVA_HOME
      run: |
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        echo "$JAVA_HOME/bin" >> $GITHUB_PATH

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cython==0.29.36
        pip install buildozer

    - name: Verify installation
      run: |
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer --version)"
        echo "Java version: $(java -version 2>&1 | head -1)"
        echo "JAVA_HOME: $JAVA_HOME"

    - name: Prepare buildozer.spec for GitHub Actions
      run: |
        # Comment out specific SDK paths to let buildozer auto-download
        cp buildozer.spec buildozer.spec.backup
        sed -i 's/^android\.sdk_path/#android.sdk_path/' buildozer.spec
        sed -i 's/^android\.ndk_path/#android.ndk_path/' buildozer.spec
        
        echo "📄 Modified buildozer.spec Android settings:"
        grep -E "(android\.api|android\.build_tools|android\.ndk|android\.sdk_path|android\.ndk_path)" buildozer.spec

    - name: Initialize buildozer
      run: |
        echo "🔧 Initializing buildozer..."
        buildozer init || echo "Already initialized"
        
        echo "📋 Available buildozer targets:"
        buildozer android list || echo "List command completed"

    - name: Build APK with license handling
      run: |
        echo "🚀 Starting APK build..."
        
        # First attempt
        if ! buildozer android debug 2>&1 | tee build.log; then
          echo "⚠️ First build attempt failed, checking for license issues..."
          
          # Find buildozer's Android SDK
          sdk_paths=(
            "$HOME/.buildozer/android/platform/android-sdk"
            "$HOME/.buildozer/android/platform/android-sdk-*"
          )
          
          for sdk_pattern in "${sdk_paths[@]}"; do
            for sdk_path in $sdk_pattern; do
              if [ -d "$sdk_path" ]; then
                echo "✅ Found Android SDK at: $sdk_path"
                export ANDROID_HOME="$sdk_path"
                export ANDROID_SDK_ROOT="$sdk_path"
                
                # Try different sdkmanager locations and accept licenses
                sdkmanagers=(
                  "$sdk_path/cmdline-tools/latest/bin/sdkmanager"
                  "$sdk_path/tools/bin/sdkmanager"
                  "$sdk_path/cmdline-tools/tools/bin/sdkmanager"
                )
                
                for sdkmanager in "${sdkmanagers[@]}"; do
                  if [ -f "$sdkmanager" ]; then
                    echo "🔧 Using sdkmanager: $sdkmanager"
                    yes | "$sdkmanager" --licenses 2>/dev/null || true
                    yes | "$sdkmanager" --update 2>/dev/null || true
                    break
                  fi
                done
                
                # Retry build
                echo "🔄 Retrying build after license acceptance..."
                buildozer android debug 2>&1 | tee build_retry.log && break
                
              fi
            done
          done
        fi

    - name: Check build results
      run: |
        echo "📱 Checking for APK files:"
        find . -name "*.apk" -type f || echo "No APK files found"
        
        if [ -d bin ]; then
          echo "📂 bin directory contents:"
          ls -la bin/
        else
          echo "📂 bin directory not found"
        fi
        
        echo "📋 All log files:"
        find . -name "*.log" -type f | head -10

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cashlytics-apk
        path: |
          bin/*.apk
          *.apk
        retention-days: 30
        if-no-files-found: warn

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs
        path: |
          *.log
          .buildozer/**/*.log
          .buildozer/**/*.txt
          buildozer.spec.backup
        retention-days: 7
        if-no-files-found: warn

    - name: Restore buildozer.spec
      if: always()
      run: |
        if [ -f buildozer.spec.backup ]; then
          mv buildozer.spec.backup buildozer.spec
          echo "✅ Restored original buildozer.spec"
        fi