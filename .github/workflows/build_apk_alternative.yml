name: Build APK (Alternative)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            unzip \
            openjdk-17-jdk \
            python3-pip \
            python3-setuptools \
            python3-dev \
            python3-venv \
            zlib1g-dev \
            libffi-dev \
            libssl-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            libncurses5-dev \
            libncursesw5-dev \
            xz-utils \
            tk-dev \
            libxml2-dev \
            libxmlsec1-dev \
            liblzma-dev

      - name: Install Buildozer
        run: |
          pip install --upgrade pip wheel setuptools
          pip install buildozer cython

      - name: Set up Android SDK manually
        run: |
          # Set up directories
          mkdir -p $HOME/android-sdk
          cd $HOME/android-sdk

          # Download and extract command line tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip

          # Organize command line tools
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true

          # Set environment variables for this session
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools

          # Make environment variables persistent
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH

      - name: Install Android components
        run: |
          # Set environment variables first
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk

          # Create licenses directory and accept all licenses automatically
          mkdir -p $ANDROID_HOME/licenses
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_HOME/licenses/android-sdk-license
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_HOME/licenses/android-sdk-preview-license
          echo "d975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_HOME/licenses/intel-android-extra-license
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_HOME/licenses/android-googletv-license
          echo "79120722343a6f314e0719f863036c702b0e6b2a" > $ANDROID_HOME/licenses/android-sdk-arm-dbt-license
          echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > $ANDROID_HOME/licenses/google-gdk-license
          echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" > $ANDROID_HOME/licenses/mips-android-sysimage-license

          # Accept licenses using multiple methods
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true
          echo "y
          y
          y
          y
          y
          y
          y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true

          # Install components with explicit version control
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" || true

          # Force install the specific build-tools version we need
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3" || true
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;29.0.3" || true
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;28.0.3" || true

          # Install NDK
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;23.2.8568313" || true

          # Verify what we actually installed
          echo "=== Installed packages ==="
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed

          # Check build-tools directory structure
          echo "=== Build-tools directory ==="
          ls -la $ANDROID_HOME/build-tools/ 2>/dev/null || echo "No build-tools directory found"

          if [ -d "$ANDROID_HOME/build-tools" ]; then
            for dir in $ANDROID_HOME/build-tools/*/; do
              if [ -d "$dir" ]; then
                echo "Found build-tools version: $(basename $dir)"
                ls -la "$dir" | grep aidl || echo "No aidl in $(basename $dir)"
              fi
            done
          fi

          # Create symlinks for compatibility
          if [ -d "$ANDROID_HOME/build-tools/30.0.3" ]; then
            ln -sf "$ANDROID_HOME/build-tools/30.0.3" "$ANDROID_HOME/build-tools/latest" 2>/dev/null || true
            echo "Created symlink: latest -> 30.0.3"
          fi

          # Make aidl executable if found
          find $ANDROID_HOME -name "aidl" -type f -exec chmod +x {} \; 2>/dev/null || true

          # Final verification
          echo "=== Final aidl check ==="
          find $ANDROID_HOME -name "aidl" -type f 2>/dev/null | while read aidl_path; do
            echo "Found aidl at: $aidl_path"
            ls -la "$aidl_path"
          done

      - name: Manual build-tools installation (fallback)
        run: |
          export ANDROID_HOME=$HOME/android-sdk

          # Check if we have build-tools, if not download manually
          if [ ! -d "$ANDROID_HOME/build-tools/30.0.3" ]; then
            echo "Build-tools 30.0.3 not found, downloading manually..."
            mkdir -p $ANDROID_HOME/build-tools
            cd $ANDROID_HOME/build-tools
            
            # Download build-tools 30.0.3 directly
            wget -q https://dl.google.com/android/repository/build-tools_r30.0.3-linux.zip
            unzip -q build-tools_r30.0.3-linux.zip
            mv android-* 30.0.3 2>/dev/null || true
            
            # Make all tools executable
            chmod +x 30.0.3/* 2>/dev/null || true
            
            echo "Manually installed build-tools 30.0.3"
            ls -la 30.0.3/aidl 2>/dev/null || echo "aidl still not found after manual install"
          fi

      - name: Build APK
        run: |
          # Debug workspace
          echo "=== Working Directory Debug ==="
          pwd
          echo "=== All files ==="
          ls -la
          echo "=== Looking for buildozer files ==="
          find . -name "*buildozer*" -o -name "*.spec" | head -10
          echo "=============================="

          # Ensure buildozer.spec exists
          if [ ! -f "buildozer.spec" ]; then
            echo "buildozer.spec not found! Creating one..."
            if [ -f "buildozer.spec.bak" ]; then
              cp buildozer.spec.bak buildozer.spec
            else
              # Create a working buildozer.spec using echo with explicit SDK paths
              echo "[app]" > buildozer.spec
              echo "title = Cashlytics" >> buildozer.spec
              echo "package.name = cashlytics" >> buildozer.spec
              echo "package.domain = org.personal.cashlytics" >> buildozer.spec
              echo "source.dir = ." >> buildozer.spec
              echo "source.include_exts = py,png,jpg,kv,atlas,txt,db" >> buildozer.spec
              echo "source.include_patterns = assets/*,screens/*" >> buildozer.spec
              echo "version = 0.1" >> buildozer.spec
              echo "requirements = python3,kivy,kivymd,sqlite3,pillow" >> buildozer.spec
              echo "orientation = portrait" >> buildozer.spec
              echo "fullscreen = 0" >> buildozer.spec
              echo "" >> buildozer.spec
              echo "[buildozer]" >> buildozer.spec
              echo "log_level = 2" >> buildozer.spec
              echo "warn_on_root = 0" >> buildozer.spec
              echo "" >> buildozer.spec
              echo "android.archs = arm64-v8a" >> buildozer.spec
              echo "android.api = 30" >> buildozer.spec
              echo "android.minapi = 21" >> buildozer.spec
              echo "android.ndk = 23b" >> buildozer.spec
              echo "android.sdk = 30" >> buildozer.spec
              echo "android.build_tools = 30.0.3" >> buildozer.spec
              echo "android.sdk_path = $HOME/android-sdk" >> buildozer.spec
              echo "android.ndk_path = $HOME/android-sdk/ndk/23.2.8568313" >> buildozer.spec
              echo "android.entrypoint = org.kivy.android.PythonActivity" >> buildozer.spec
              echo "android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE" >> buildozer.spec
              echo "icon.filename = assets/icons/logo.png" >> buildozer.spec
            fi
          fi

          # Show buildozer.spec content
          echo "=== buildozer.spec content ==="
          cat buildozer.spec
          echo "=============================="

          # Set explicit environment variables to override buildozer defaults
          export ANDROID_HOME=$ANDROID_HOME
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export ANDROID_API_LEVEL=30
          export ANDROID_BUILD_TOOLS_VERSION=30.0.3
          export ANDROID_NDK_VERSION=23b
          export PATH=$PATH:$ANDROID_HOME/build-tools/30.0.3:$ANDROID_HOME/platform-tools

          # Show environment
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_API_LEVEL: $ANDROID_API_LEVEL"
          echo "ANDROID_BUILD_TOOLS_VERSION: $ANDROID_BUILD_TOOLS_VERSION"
          echo "PATH includes Android tools: $(echo $PATH | grep android || echo 'not found')"

          # Check if build-tools exist and show aidl location
          echo "Available build-tools:"
          ls -la $ANDROID_HOME/build-tools/ || echo "No build-tools directory"
          echo "Looking for aidl tool:"
          find $ANDROID_HOME -name "aidl" -type f 2>/dev/null | head -5

          # Make sure aidl is executable
          if [ -f "$ANDROID_HOME/build-tools/30.0.3/aidl" ]; then
            chmod +x "$ANDROID_HOME/build-tools/30.0.3/aidl"
            echo "aidl found and made executable: $ANDROID_HOME/build-tools/30.0.3/aidl"
          fi

          # Accept any remaining licenses one more time
          echo y | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true

          # Build with maximum verbosity and force clean
          buildozer android clean || true
          buildozer android debug --verbose

      - name: Find and upload APK
        run: |
          echo "Looking for APK files..."
          find . -name "*.apk" -type f -exec ls -la {} \; || echo "No APK files found"

          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "No APK found in current directory, checking bin..."
            ls -la bin/ || echo "No bin directory"
            APK_FILE=$(find bin/ -name "*.apk" -type f 2>/dev/null | head -1)
          fi

          if [ -z "$APK_FILE" ]; then
            echo "ERROR: No APK file found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

          echo "Found APK: $APK_FILE"
          echo "APK_FILE=$APK_FILE" >> $GITHUB_ENV

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cashlytics-apk-alternative
          path: ${{ env.APK_FILE }}
          if-no-files-found: error
