name: Build APK (Alternative)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            unzip \
            openjdk-8-jdk \
            python3-pip \
            python3-setuptools \
            python3-dev \
            ffmpeg \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            zlib1g-dev

      - name: Install Buildozer
        run: |
          pip install --upgrade pip wheel setuptools
          pip install buildozer cython

      - name: Set up Android SDK manually
        run: |
          # Download Android SDK
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
          unzip -q commandlinetools-linux-8512546_latest.zip
          
          # Create SDK directory
          mkdir -p $HOME/android-sdk
          mv cmdline-tools $HOME/android-sdk/
          mkdir -p $HOME/android-sdk/cmdline-tools/latest
          mv $HOME/android-sdk/cmdline-tools/* $HOME/android-sdk/cmdline-tools/latest/ || true
          
          # Set environment variables
          echo "export ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "export ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "export PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools" >> $GITHUB_ENV

      - name: Install Android components
        run: |
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools
          
          # Accept licenses and install components
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" \
            "build-tools;30.0.3" \
            "ndk;21.4.7075529"

      - name: Build APK
        run: |
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools
          
          # Show buildozer.spec content
          echo "=== buildozer.spec content ==="
          cat buildozer.spec
          echo "=============================="
          
          # Build with maximum verbosity
          buildozer android debug --verbose
          
      - name: Find and upload APK
        run: |
          echo "Looking for APK files..."
          find . -name "*.apk" -type f -exec ls -la {} \; || echo "No APK files found"
          
          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "No APK found in current directory, checking bin..."
            ls -la bin/ || echo "No bin directory"
            APK_FILE=$(find bin/ -name "*.apk" -type f 2>/dev/null | head -1)
          fi
          
          if [ -z "$APK_FILE" ]; then
            echo "ERROR: No APK file found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          echo "Found APK: $APK_FILE"
          echo "APK_FILE=$APK_FILE" >> $GITHUB_ENV
          
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cashlytics-apk-alternative
          path: ${{ env.APK_FILE }}
          if-no-files-found: error