name: Build APK (Alternative)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            unzip \
            openjdk-17-jdk \
            python3-pip \
            python3-setuptools \
            python3-dev \
            python3-venv \
            zlib1g-dev \
            libffi-dev \
            libssl-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            libncurses5-dev \
            libncursesw5-dev \
            xz-utils \
            tk-dev \
            libxml2-dev \
            libxmlsec1-dev \
            liblzma-dev

      - name: Install Buildozer
        run: |
          pip install --upgrade pip wheel setuptools
          pip install buildozer cython

      - name: Set up Android SDK manually
        run: |
          # Set up directories
          mkdir -p $HOME/android-sdk
          cd $HOME/android-sdk
          
          # Download and extract command line tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          
          # Organize command line tools
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
          
          # Set environment variables for this session
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
          
          # Make environment variables persistent
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH

      - name: Install Android components
        run: |
          # Accept licenses and install components
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" \
            "build-tools;30.0.3" \
            "ndk;23.2.8568313"
          
          # Verify installation
          echo "Installed Android components:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed

      - name: Build APK
        run: |
          # Debug workspace
          echo "=== Working Directory Debug ==="
          pwd
          echo "=== All files ==="
          ls -la
          echo "=== Looking for buildozer files ==="
          find . -name "*buildozer*" -o -name "*.spec" | head -10
          echo "=============================="
          
          # Ensure buildozer.spec exists
          if [ ! -f "buildozer.spec" ]; then
            echo "buildozer.spec not found! Creating one..."
            if [ -f "buildozer.spec.bak" ]; then
              cp buildozer.spec.bak buildozer.spec
            else
              # Create a working buildozer.spec
              cat > buildozer.spec << EOF
[app]
title = Cashlytics
package.name = cashlytics
package.domain = org.personal.cashlytics
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,txt,db
source.include_patterns = assets/*,screens/*
version = 0.1
requirements = python3,kivy,kivymd,sqlite3,pillow
orientation = portrait
fullscreen = 0

[buildozer]
log_level = 2
warn_on_root = 0

android.archs = arm64-v8a
android.api = 30
android.minapi = 21
android.ndk = 23b
android.sdk = 30
android.build_tools = 30.0.3
android.entrypoint = org.kivy.android.PythonActivity
android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
icon.filename = assets/icons/logo.png
EOF
            fi
          fi
          
          # Show buildozer.spec content
          echo "=== buildozer.spec content ==="
          cat buildozer.spec
          echo "=============================="
          
          # Show environment
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "PATH includes Android tools: $(echo $PATH | grep android || echo 'not found')"
          
          # Build with maximum verbosity
          buildozer android debug --verbose
          
      - name: Find and upload APK
        run: |
          echo "Looking for APK files..."
          find . -name "*.apk" -type f -exec ls -la {} \; || echo "No APK files found"
          
          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "No APK found in current directory, checking bin..."
            ls -la bin/ || echo "No bin directory"
            APK_FILE=$(find bin/ -name "*.apk" -type f 2>/dev/null | head -1)
          fi
          
          if [ -z "$APK_FILE" ]; then
            echo "ERROR: No APK file found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          echo "Found APK: $APK_FILE"
          echo "APK_FILE=$APK_FILE" >> $GITHUB_ENV
          
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cashlytics-apk-alternative
          path: ${{ env.APK_FILE }}
          if-no-files-found: error