name: Build APK (Complete Build Tools)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Java 11  
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install complete build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          unzip \
          expect \
          build-essential \
          autoconf \
          automake \
          autotools-dev \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          python3-dev \
          python3-setuptools \
          ccache \
          m4 \
          libtool-bin

    - name: Install Python build tools
      run: |
        python -m pip install --upgrade pip
        pip install cython==0.29.36
        pip install buildozer

    - name: Prepare buildozer.spec
      run: |
        cp buildozer.spec buildozer.spec.backup
        sed -i 's/^android\.sdk_path/#android.sdk_path/' buildozer.spec
        sed -i 's/^android\.ndk_path/#android.ndk_path/' buildozer.spec

    - name: Pre-accept Android SDK licenses
      run: |
        # Pre-accept all common Android SDK licenses
        mkdir -p "$HOME/.android/licenses"
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$HOME/.android/licenses/android-sdk-license"
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> "$HOME/.android/licenses/android-sdk-license"
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> "$HOME/.android/licenses/android-sdk-license"
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$HOME/.android/licenses/android-sdk-preview-license"
        echo "504667f4c0de7af1a06de9f4b1727b84351f2910" >> "$HOME/.android/licenses/android-sdk-preview-license"
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > "$HOME/.android/licenses/intel-android-extra-license"

    - name: Build APK with complete environment
      run: |
        echo "🚀 Building APK with complete build environment..."
        
        # Set environment for better build compatibility
        export BUILDOZER_LOG_LEVEL=2
        export PYTHONUNBUFFERED=1
        export CC=gcc
        export CXX=g++
        
        # Use expect for license handling
        expect -c "
        set timeout 2400
        spawn buildozer android debug -v
        expect {
          \"Accept? (y/N):\" { 
            send \"y\r\"
            exp_continue 
          }
          \"Do you accept the license\" { 
            send \"y\r\"
            exp_continue 
          }
          \"(y/N)\" { 
            send \"y\r\"
            exp_continue 
          }
          \"y/N\" { 
            send \"y\r\"
            exp_continue 
          }
          eof { 
            puts \"Build process completed\"
          }
          timeout { 
            puts \"Build completed or timed out\"
          }
        }
        " 2>&1 | tee complete_build.log

    - name: Check for APK files everywhere
      run: |
        echo "🔍 Comprehensive APK search:"
        
        # Search the entire workspace
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "📱 Found APK: $apk"
          ls -lh "$apk"
          mkdir -p bin
          cp "$apk" bin/
        done || echo "No APK files found in workspace"
        
        echo ""
        echo "📂 Checking specific build locations:"
        
        # Check all possible APK locations
        for location in \
          "bin" \
          ".buildozer/android/platform/build-*/outputs/apk" \
          ".buildozer/android/platform/build-*/bin" \
          ".buildozer/android/platform/build-*/build/outputs/apk" \
          ".buildozer/android/platform/build-*/dist" \
          ".buildozer/android/bin" \
          ".buildozer/android/dist"; do
          
          if [ -d "$location" ]; then
            echo "Checking $location:"
            find "$location" -name "*.apk" -type f 2>/dev/null || echo "  No APK files"
          fi
        done
        
        echo ""
        echo "📋 Final bin directory:"
        ls -la bin/ 2>/dev/null || echo "bin directory empty or missing"

    - name: Analyze build log for specific errors
      run: |
        if [ -f complete_build.log ]; then
          echo "📋 Build log analysis:"
          echo "Log size: $(wc -l < complete_build.log) lines"
          
          echo ""
          echo "=== Checking for APK creation messages ==="
          grep -i "apk.*created\|apk.*generated\|BUILD.*SUCCESS\|package.*apk" complete_build.log || echo "No APK creation messages found"
          
          echo ""
          echo "=== Checking for build completion ==="
          grep -i "build.*complete\|build.*success\|final.*apk" complete_build.log || echo "No completion messages found"
          
          echo ""
          echo "=== Recent errors (last 20) ==="
          grep -i "error\|failed\|exception" complete_build.log | tail -20 || echo "No recent errors found"
          
          echo ""
          echo "=== Last 50 lines of build log ==="
          tail -50 complete_build.log
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cashlytics-apk-complete
        path: |
          bin/*.apk
          **/*.apk
        retention-days: 30
        if-no-files-found: warn

    - name: Upload complete build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complete-build-logs
        path: |
          complete_build.log
          .buildozer/**/*.log
        retention-days: 7
        if-no-files-found: warn

    - name: Restore buildozer.spec
      if: always()
      run: |
        if [ -f buildozer.spec.backup ]; then
          mv buildozer.spec.backup buildozer.spec
        fi