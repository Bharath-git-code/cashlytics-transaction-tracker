name: Build APK (Fixed & Tested)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04  # Using LTS for better compatibility
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # More stable for Kivy builds

    - name: Set up Java 8  
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '8'  # p4a works better with Java 8

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          zip \
          unzip \
          openjdk-8-jdk \
          python3-pip \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev \
          expect

    - name: Set JAVA_HOME
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> $GITHUB_ENV
        echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cython==0.29.36
        pip install buildozer==1.5.0
        pip install colorama

    - name: Setup buildozer.spec for better compatibility
      run: |
        cp buildozer.spec buildozer.spec.backup
        
        # Configure for older, more stable versions
        sed -i 's/android.api = 33/android.api = 30/' buildozer.spec
        sed -i 's/android.minapi = 21/android.minapi = 21/' buildozer.spec
        sed -i 's/android.ndk = 25b/android.ndk = 23b/' buildozer.spec
        sed -i 's/android.sdk = 33/android.sdk = 30/' buildozer.spec
        
        # Set specific NDK and SDK versions that work well together
        echo "" >> buildozer.spec
        echo "# Stable build configuration" >> buildozer.spec
        echo "android.gradle_dependencies = com.android.support:support-v4:28.0.0" >> buildozer.spec
        
        # Show the configuration
        echo "=== Final buildozer.spec configuration ==="
        grep -E "(android\.api|android\.minapi|android\.ndk|android\.sdk|requirements)" buildozer.spec

    - name: Clean any previous builds
      run: |
        rm -rf .buildozer
        rm -rf bin

    - name: Pre-accept licenses with specific hashes
      run: |
        mkdir -p "$HOME/.android/licenses"
        
        # Android SDK License
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$HOME/.android/licenses/android-sdk-license"
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> "$HOME/.android/licenses/android-sdk-license"
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> "$HOME/.android/licenses/android-sdk-license"
        
        # Android SDK Preview License
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$HOME/.android/licenses/android-sdk-preview-license"
        
        # Google APIs License
        echo "d975f751698a77b662f1254ddbeed3901e976f5a" > "$HOME/.android/licenses/google-gdk-license"
        
        echo "‚úÖ Android licenses pre-accepted"

    - name: Build APK with stable configuration
      timeout-minutes: 45
      run: |
        echo "üöÄ Starting stable APK build..."
        
        export BUILDOZER_LOG_LEVEL=2
        export PYTHONUNBUFFERED=1
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        
        # Build with comprehensive error handling
        expect -c "
        set timeout 2700
        spawn buildozer android debug -v
        expect {
          \"Accept? (y/N):\" { 
            send \"y\r\"
            exp_continue 
          }
          \"Do you accept the license\" { 
            send \"y\r\"
            exp_continue 
          }
          \"(y/N)\" { 
            send \"y\r\"
            exp_continue 
          }
          \"BUILD SUCCESSFUL\" {
            puts \"‚úÖ Build completed successfully!\"
            exit 0
          }
          \"BUILD FAILED\" {
            puts \"‚ùå Build failed\"
            exit 1
          }
          eof { 
            puts \"Build process completed\"
            exit 0
          }
          timeout { 
            puts \"‚è∞ Build timed out after 45 minutes\"
            exit 1
          }
        }
        " 2>&1 | tee build.log

    - name: Search for APK files
      if: always()
      run: |
        echo "üîç Searching for APK files..."
        
        # Create bin directory
        mkdir -p bin
        
        # Search for APKs in common locations
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "üì± Found APK: $apk"
          ls -lh "$apk"
          cp "$apk" bin/
        done
        
        # Also check buildozer dist directory specifically
        if [ -d ".buildozer/android/platform/build-arm64-v8a_armeabi-v7a/dists" ]; then
          find .buildozer/android/platform/build-arm64-v8a_armeabi-v7a/dists -name "*.apk" 2>/dev/null | while read apk; do
            echo "üì± Found APK in dists: $apk"
            cp "$apk" bin/
          done
        fi
        
        echo ""
        echo "üìÇ Final bin contents:"
        ls -la bin/ || echo "No files in bin/"

    - name: Show build status
      if: always()
      run: |
        echo "üìã Build Analysis:"
        
        if [ -f build.log ]; then
          echo ""
          echo "=== Build Success Check ==="
          if grep -q "BUILD SUCCESSFUL\|Successfully built\|APK.*created" build.log; then
            echo "‚úÖ Build appears to have succeeded!"
          else
            echo "‚ùå No success indicators found"
          fi
          
          echo ""
          echo "=== Last 20 lines of build log ==="
          tail -20 build.log
          
          echo ""
          echo "=== Error summary ==="
          grep -i "error\|failed\|exception" build.log | tail -10 || echo "No obvious errors found"
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cashlytics-apk-fixed
        path: bin/*.apk
        retention-days: 30
        if-no-files-found: warn

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-fixed
        path: |
          build.log
          .buildozer/**/*.log
        retention-days: 7
        if-no-files-found: warn

    - name: Restore buildozer.spec
      if: always()
      run: |
        if [ -f buildozer.spec.backup ]; then
          mv buildozer.spec.backup buildozer.spec
        fi