name: Debug APK Build Process

on:
  workflow_dispatch:

jobs:
  debug:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Java 11  
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git unzip tree
        python -m pip install --upgrade pip
        pip install cython==0.29.36
        pip install buildozer

    - name: Verify environment
      run: |
        echo "=== Environment Info ==="
        echo "Python: $(python --version)"
        echo "Java: $(java -version 2>&1 | head -1)"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "Buildozer: $(buildozer --version)"
        echo "Working directory: $(pwd)"
        echo ""

    - name: Check project structure
      run: |
        echo "=== Project Structure ==="
        ls -la
        echo ""
        echo "=== Python files ==="
        find . -name "*.py" | head -10
        echo ""
        echo "=== Requirements check ==="
        if [ -f requirements.txt ]; then
          echo "requirements.txt content:"
          cat requirements.txt
        else
          echo "No requirements.txt found"
        fi

    - name: Validate main.py
      run: |
        echo "=== Validating main.py ==="
        if [ -f main.py ]; then
          echo "✅ main.py exists"
          echo "First 10 lines:"
          head -10 main.py
          echo ""
          echo "Checking Python syntax:"
          python -m py_compile main.py && echo "✅ Syntax OK" || echo "❌ Syntax error"
        else
          echo "❌ main.py not found!"
        fi

    - name: Prepare buildozer.spec for debugging
      run: |
        echo "=== Buildozer Spec Analysis ==="
        cp buildozer.spec buildozer.spec.backup
        
        # Show current spec
        echo "Current buildozer.spec key settings:"
        grep -E "^(title|package\.name|source\.dir|requirements|android\.)" buildozer.spec | head -10
        
        # Clean spec for fresh build
        sed -i 's/^android\.sdk_path/#android.sdk_path/' buildozer.spec
        sed -i 's/^android\.ndk_path/#android.ndk_path/' buildozer.spec
        
        echo ""
        echo "Modified spec:"
        grep -E "^(title|package\.name|source\.dir|requirements|android\.)" buildozer.spec | head -10

    - name: Test buildozer initialization
      run: |
        echo "=== Testing Buildozer Initialization ==="
        buildozer init 2>&1 | tee init.log
        echo ""
        echo "Available targets:"
        buildozer android list 2>&1 | tee list.log

    - name: Attempt build with detailed logging
      run: |
        echo "=== Starting Build Process ==="
        export BUILDOZER_LOG_LEVEL=2
        
        # Try build with maximum verbosity and capture everything
        timeout 1800 buildozer android debug -v 2>&1 | tee detailed_build.log || {
          echo "Build process completed or timed out"
          echo "Exit code: $?"
        }

    - name: Analyze build results
      run: |
        echo "=== Build Analysis ==="
        
        echo "Looking for APK files everywhere:"
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        
        echo ""
        echo "Checking bin directory:"
        if [ -d bin ]; then
          echo "bin directory exists:"
          ls -la bin/
        else
          echo "bin directory does not exist"
        fi
        
        echo ""
        echo "Checking .buildozer structure:"
        if [ -d .buildozer ]; then
          echo ".buildozer exists, showing structure:"
          tree .buildozer -L 3 || ls -la .buildozer/
        else
          echo ".buildozer directory not found"
        fi
        
        echo ""
        echo "Looking for build artifacts:"
        find .buildozer -name "*.apk" -type f 2>/dev/null || echo "No APK in .buildozer"
        
        echo ""
        echo "Checking for error patterns in build log:"
        if [ -f detailed_build.log ]; then
          echo "Build log size: $(wc -l < detailed_build.log) lines"
          echo ""
          echo "=== Last 50 lines of build log ==="
          tail -50 detailed_build.log
          echo ""
          echo "=== Searching for errors ==="
          grep -i "error\|failed\|exception" detailed_build.log | tail -10 || echo "No obvious errors found"
        fi

    - name: Check Python dependencies
      run: |
        echo "=== Python Dependencies Check ==="
        echo "Installed packages:"
        pip list | grep -E "(kivy|cython|buildozer)"
        
        echo ""
        echo "Testing imports:"
        python3 -c "
        try:
            import kivy
            print('✅ Kivy imported successfully')
        except ImportError as e:
            print(f'❌ Kivy import failed: {e}')
        
        try:
            import kivymd
            print('✅ KivyMD imported successfully')
        except ImportError as e:
            print(f'❌ KivyMD import failed: {e}')
        "

    - name: Upload comprehensive logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: debug-analysis-complete
        path: |
          *.log
          buildozer.spec.backup
          .buildozer/**/*.log
          .buildozer/**/build.log
        retention-days: 7
        if-no-files-found: warn

    - name: Restore buildozer.spec
      if: always()
      run: |
        if [ -f buildozer.spec.backup ]; then
          mv buildozer.spec.backup buildozer.spec
        fi