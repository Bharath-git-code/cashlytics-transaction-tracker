name: Build APK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            python3 \
            python3-pip \
            python3-venv \
            openjdk-17-jdk \
            unzip \
            zlib1g-dev \
            libncurses5-dev \
            libncursesw5-dev \
            libtinfo6 \
            cmake \
            libffi-dev \
            libssl-dev \
            automake \
            autoconf \
            libtool \
            pkg-config

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 30
          build-tools-version: 30.0.3
          ndk-version: 23.2.8568313

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade buildozer cython

      - name: Accept Android licenses
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Cache Buildozer directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.buildozer
            .buildozer
          key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}

      - name: Prepare buildozer.spec
        run: |
          # Show current directory and all files
          echo "=== Current working directory ==="
          pwd
          echo "=== All files in directory ==="
          ls -la
          echo "=============================="
          
          # Check if buildozer.spec exists
          if [ -f "buildozer.spec" ]; then
            echo "=== Current buildozer.spec ==="
            cat buildozer.spec
            echo "=============================="
          else
            echo "ERROR: buildozer.spec not found!"
            echo "Available files:"
            find . -name "*.spec" -o -name "buildozer*" -o -name "*.py" | head -10
            
            # Try to create buildozer.spec if buildozer.spec.bak exists
            if [ -f "buildozer.spec.bak" ]; then
              echo "Found buildozer.spec.bak, copying to buildozer.spec"
              cp buildozer.spec.bak buildozer.spec
              cat buildozer.spec
            else
              echo "Creating minimal buildozer.spec"
              buildozer init
              # Replace with our configuration
              cat > buildozer.spec << 'EOF'
[app]
title = Cashlytics
package.name = cashlytics
package.domain = org.personal.cashlytics
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,txt,db
source.include_patterns = assets/*,screens/*
version = 0.1
requirements = python3,kivy,kivymd,sqlite3,pillow
orientation = portrait
fullscreen = 0

[buildozer]
log_level = 2
warn_on_root = 0

# Android specific
android.archs = arm64-v8a
android.api = 30
android.minapi = 21
android.ndk = 23b
android.sdk = 30
android.build_tools = 30.0.3
android.entrypoint = org.kivy.android.PythonActivity
android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
icon.filename = assets/icons/logo.png
EOF
              echo "Created buildozer.spec:"
              cat buildozer.spec
            fi
          fi

      - name: Build APK
        run: |
          # Set environment variables
          export ANDROID_HOME=$ANDROID_HOME
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
          
          # Build with verbose output
          buildozer android debug --verbose

      - name: Find APK file
        id: find-apk
        run: |
          echo "Looking for APK files..."
          find . -name "*.apk" -type f -exec ls -la {} \; || echo "No APK files found"
          
          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "Checking bin directory..."
            ls -la bin/ || echo "No bin directory"
            APK_FILE=$(find bin/ -name "*.apk" -type f 2>/dev/null | head -1)
          fi
          
          if [ -z "$APK_FILE" ]; then
            echo "ERROR: No APK file found!"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
          
          echo "apk-file=$APK_FILE" >> $GITHUB_OUTPUT
          echo "Found APK: $APK_FILE"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cashlytics-apk
          path: ${{ steps.find-apk.outputs.apk-file }}
          if-no-files-found: error
